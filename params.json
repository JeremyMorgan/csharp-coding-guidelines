{"name":"Csharp-coding-guidelines","tagline":"C# Coding Guidelines","body":"C# Coding Guidelines\r\n=========\r\n\r\nThis is a set of C# Coding Guidelines I'm putting together for myself and others in the community who would like to contribute. It will be both coding guidelines and tips / best practices for C#.\r\n\r\nI have also added [some snippets](https://github.com/JeremyMorgan/csharp-coding-guidelines/tree/master/snippets \"Code Snippets\") to load into Visual Studio for time saving purposes. \r\n\r\nFeel free to contribute!\r\n\r\n##Code Layout\r\n\r\nUse Visual Studio Defaults\r\n- 4 character indentation\r\n- tabs saved as spaces\r\n\r\nSource Code Layout\r\n\r\n- One statement per line\r\n- One declaration per line\r\n\r\nGood:\r\n``` C#\r\nint price;\r\nint tax;\r\nint total;\r\n```\r\n\r\nBad:\r\n``` C#\r\nint price, tax, total;\r\n```\r\n- separate method definitions from property definitions ( 1 blank line )\r\n- bracket on line following statement:\r\n\r\nGood:\r\n``` C# \r\npublic int returnInt()\r\n{\r\n    // stuff\r\n}\r\n```\r\n\r\nBad:\r\n``` C# \r\npublic int returnInt(){\r\n    // stuff\r\n}\r\n```\r\n\r\n## Variables\r\n\r\nuse camel case for fields and local variables:\r\n\r\n``` C#\r\nstring myString\r\n```\r\n\r\nUse Pascal casing for all public member, type, and namespace names consisting of multiple words.\r\n\r\n(From MSDN)\r\n\r\n``` C# \r\npublic class SampleClass\r\n{\r\n   public Color BackColor \r\n   {\r\n      // Code for Get and Set accessors goes here.\r\n   }\r\n}\r\n```\r\n\r\nUse camel casing for parameters:\r\n\r\n``` C#\r\npublic void RemoveString(string ourString) \r\n```\r\n\r\nDO NOT use Hungarian notation or language specific naming ( IntMyInteger or ConvertToShort )\r\n\r\n##Classes\r\n\r\n###A class or interface should have a single purpose. \r\n\r\nA class can represent a primitive type or datastructure, abstraction or handle interaction between other classes. But don't mix any of these things. Follow the \"Single Responsibility Principle\" (from SOLID) \r\n\r\nUse design patterns to communicate the intent of the class. \r\n\r\n##Constructors\r\n\r\nConstructors should only be used to create a useful object. If you have too many paramaters in your constructor your class may have too much responsibility.\r\n\r\n\r\n###Use a method instead of a property\r\n\r\nWhenever you have a property that:\r\n\r\n- Contains logic\r\n- performs more work than setting a value\r\n- returns a different value with similar arguments (rand, guid, etc)\r\n- Changest the state of another property or object\r\n\r\nUse a method instead. \r\n\r\nUse Pascal casing\r\n\r\n##Miscellaneous\r\n\r\n###Throw exceptions not values\r\n\r\nIt's common for people throw a status value, such as a plain text friendly message or a boolean value to indicate success. Use the exception system to it's advantage. Catch the exception and out output it to a debug console or log it in another way. It's ok to append a friendly message or hint to what may have happened, but don't rely on this. Structured exception handling reduces debugging and repair time dramatically. \r\n\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}